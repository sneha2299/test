package com.testingAPI.blog.services.impl;

import java.util.List;
import java.util.stream.Collectors;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.testingAPI.blog.entity.Category;
import com.testingAPI.blog.exception.ResourceNotFoundException;
import com.testingAPI.blog.payload.CategoryDto;
import com.testingAPI.blog.repository.CategoryRepo;
import com.testingAPI.blog.services.CategoryService;

import jakarta.annotation.Resource;

@Service
public class CategoryServiceImpl implements CategoryService {

	@Autowired(required=false)
	private CategoryRepo categoryRepo;
	@Autowired
	private ModelMapper modelMapper;
	
	
	@Override
	public CategoryDto createCategory(CategoryDto categoryDto) {

		Category cat = this.modelMapper.map(categoryDto, Category.class);
		Category addedCat = this.categoryRepo.save(cat);
		return this.modelMapper.map(addedCat, CategoryDto.class);
	}

	@Override
	public CategoryDto updateCategory(CategoryDto categoryDto, Integer categoryID) {

		Category cat= this.categoryRepo.findById(categoryID).orElseThrow(()->new ResourceNotFoundException("Category", "Category Id", categoryID));
		cat.setCategoryTitle(categoryDto.getCategoryTitle());
		cat.setCategoryDescription(categoryDto.getCategoryDescription());
		Category updatedCat = this.categoryRepo.save(cat);
		return  this.modelMapper.map(updatedCat, CategoryDto.class);
	}

	@Override
	public void deleteCategory(Integer categoryID) {
		Category cat= this.categoryRepo.findById(categoryID)
				.orElseThrow(()-> new ResourceNotFoundException("Category", "Category ID", categoryID));
		this.categoryRepo.delete(cat);
	}

	@Override
	public CategoryDto getCategory(Integer categoryID) {
		Category cat = this.categoryRepo.findById(categoryID)
				.orElseThrow(()-> new ResourceNotFoundException("Category", "Category ID", categoryID));
		return this.modelMapper.map(cat, CategoryDto.class);
	}

	@Override
	public List<CategoryDto> getAllCategory() {
		List<Category> cats = this.categoryRepo.findAll();
		List<CategoryDto> catDtos = cats.stream().map(x -> this.modelMapper.map(x, CategoryDto.class)).collect(Collectors.toList());
		return catDtos;
	}

}
